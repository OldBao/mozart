<?xml version='1.0' encoding='ISO-8859-1'?> 
<!DOCTYPE uridef[
  <!ENTITY rdf     "http://www.w3.org/1999/02/22-rdf-syntax-ns">
  <!ENTITY rdfs    "http://www.w3.org/2000/01/rdf-schema">
  <!ENTITY xsd     "http://www.w3.org/2001/XMLSchema">
  <!ENTITY owl     "http://www.w3.org/2002/07/owl">
  <!ENTITY expr    "http://www.daml.org/services/owl-s/1.2/generic/Expression.owl">
  <!ENTITY swrl    "http://www.w3.org/2003/11/swrl">
  <!ENTITY swrl-onto "http://www.w3.org/2003/11/swrl">
  <!ENTITY service "http://www.daml.org/services/owl-s/1.2/Service.owl">
  <!ENTITY process "http://www.daml.org/services/owl-s/1.2/Process.owl">
  <!ENTITY time 	 "http://www.isi.edu/~pan/damltime/time-entry.owl">  
  <!ENTITY objList "http://www.daml.org/services/owl-s/1.2/generic/ObjectList.owl">
  <!ENTITY congo   "http://www.daml.org/services/owl-s/1.2/CongoService.owl"> 
  <!ENTITY profileHierarchy "http://www.daml.org/services/owl-s/1.2/ProfileHierarchy.owl"> 
  <!ENTITY objList "http://www.daml.org/services/owl-s/1.2/generic/ObjectList.owl">
  <!ENTITY DEFAULT "http://www.daml.org/services/owl-s/1.2/CongoProcess.owl"> 
  <!ENTITY THIS    "http://www.daml.org/services/owl-s/1.2/CongoProcess.owl"> 
]>


<rdf:RDF
  xmlns:rdf=     "&rdf;#"
  xmlns:rdfs=    "&rdfs;#"
  xmlns:xsd =     "&xsd;#"
  xmlns:owl = "&owl;#"
  xmlns:expr = "&expr;#"
  xmlns:swrl = "&swrl;#"
  xmlns:objList =    "&objList;#"
  xmlns:service = "&service;#"
  xmlns:process = "&process;#"
  xmlns:profileHierarchy = "&profileHierarchy;#"
  xmlns:time =    "&time;#"
  xmlns =         "&DEFAULT;#"
  xml:base=       "&DEFAULT;"
>

<owl:Ontology rdf:about="">
  <owl:versionInfo>
    $Id: CongoProcess.owl,v 1.1.2.1 2006/03/06 07:13:33 elenius Exp $
  </owl:versionInfo>
  <rdfs:comment>

      A B2C bookbuying example of OWL-S (Web Ontology Language
      for Services; see http://www.daml.org/services/owl-s) usage, illustrating a
      simple use of the process model.  There are several other .owl files
      that instantiate the other areas of OWL-S (profile, grounding, and
      service declarations) for this same example.

      NOTE:  This is a sketch; not a complete example.  It is designed
      to illustrate the usage of the process model ontology.

      The service described here is a fictional book buying (or selling, 
      depending on your perspective) service from www.congo.com.  The normal
      usage scenario for these processes is as follows: they would be
      published by Congo, but executed by a software agent that wants to buy from
      Congo.

      We present two forms of the service.  First, there's a one-step
      form, ExpressCongoBuy, with the service treated as ATOMIC; i.e., no
      interactions between buying and selling agents are required, apart
      from invocation of the service and receipt of its outputs by the
      buyer.  Given certain inputs and preconditions, the service provides
      certain outputs and has specific effects.

      Second, a full-fledged version of the service is specified,
      showing its composition from its component services. 
      The full-fledged version of the service, FullCongoBuy,
      includes an arrangement of subprocesses LocateBook, PutInCart, SignIn, 
      CreateAcct, LoadUserProfile, SpecifyDeliveryDetails, 
      FinalizeBuy each with its own specification of inputs and outputs. 

      Note: Input, output, precondition, and result properties of *composite*
      processes can, in principle, be automatically generated by tools.
      Since such tools don't yet exist, they have been manually generated
      for this example.

        Original Congo example created by Srini Narayanan (srini@ai.sri.com).
        Major modifications by Mark Burstein, David Martin, Sheila McIlraith,
        Srini Narayanan, Terri Payne, Massimo Paolucci.
      
      Note: Starting with version 1.0, OWL-S views processes as
      instances of the Process class rather than as subclasses of it.
    
  </rdfs:comment>
  <owl:imports>
    <owl:Ontology rdf:about="&time;" />
  </owl:imports>
  <owl:imports>
    <owl:Ontology rdf:about="&service;" />
  </owl:imports>
  <owl:imports>
    <owl:Ontology rdf:about="&process;" />
  </owl:imports>
  <owl:imports>
    <owl:Ontology rdf:about="&profileHierarchy;" />
  </owl:imports>
  <owl:imports>
    <owl:Ontology rdf:about="&swrl-onto;" />
  </owl:imports>
</owl:Ontology>

<!--###################################################
    Some Basic Data Types
    ###################################################-->

<owl:Class rdf:ID="CreditCardType">
  <owl:oneOf rdf:parseType="Collection">
    <CreditCardType rdf:ID="MasterCard"/>
    <CreditCardType rdf:ID="VISA"/>
    <CreditCardType rdf:ID="AmericanExpress"/>
    <CreditCardType rdf:ID="DiscoverCard"/>
   </owl:oneOf>
</owl:Class>

<owl:Class rdf:ID="PackagingType">
  <owl:oneOf rdf:parseType="Collection">
    <PackagingType rdf:ID="Giftwrap"/>
    <PackagingType rdf:ID="Ordinary"/>
  </owl:oneOf>
</owl:Class>

<owl:Class rdf:ID="DeliveryType">
  <owl:oneOf rdf:parseType="Collection">
    <DeliveryType rdf:ID="FedExOneDay"/>
    <DeliveryType rdf:ID="FedEx2-3day"/>
    <DeliveryType rdf:ID="UPS"/>
    <DeliveryType rdf:ID="OrdinaryMail"/>
  </owl:oneOf>
</owl:Class>

<owl:Class rdf:ID="ValidityType">
  <owl:oneOf rdf:parseType="Collection">
    <ValidityType rdf:ID="Valid"/>
    <ValidityType rdf:ID="Expired"/>
    <ValidityType rdf:ID="InvalidCCNumber"/>
    <ValidityType rdf:ID="InvalidCCType"/>
    <ValidityType rdf:ID="AuthorizationRefused"/>
  </owl:oneOf>
</owl:Class>

<!-- ###########################################
     Stubs for other data types
     ###########################################
-->

<owl:Class rdf:ID="Shipment">
  <rdfs:subClassOf>
    <owl:Restriction>
       <owl:onProperty rdf:resource="#shippedTo"/>
       <owl:cardinality rdf:datatype="&xsd;#integer">1</owl:cardinality>
    </owl:Restriction>
  </rdfs:subClassOf>
  <rdfs:subClassOf>
    <owl:Restriction>
       <owl:onProperty rdf:resource="#shippedBook"/>
       <owl:cardinality rdf:datatype="&xsd;#integer">1</owl:cardinality>
    </owl:Restriction>
  </rdfs:subClassOf>
  <rdfs:subClassOf>
    <owl:Restriction>
       <owl:onProperty rdf:resource="#deliveryType"/>
       <owl:cardinality rdf:datatype="&xsd;#integer">1</owl:cardinality>
    </owl:Restriction>
  </rdfs:subClassOf>
  <rdfs:subClassOf>
    <owl:Restriction>
       <owl:onProperty rdf:resource="#packagingType"/>
       <owl:cardinality rdf:datatype="&xsd;#integer">1</owl:cardinality>
    </owl:Restriction>
  </rdfs:subClassOf>
</owl:Class>

<owl:ObjectProperty rdf:ID="shippedTo">
  <rdfs:domain rdf:resource="#Shipment"/>
  <rdfs:range rdf:resource="#AcctID"/>
</owl:ObjectProperty>

<owl:ObjectProperty rdf:ID="shippedBook">
  <rdfs:domain rdf:resource="#Shipment"/>
  <rdfs:range rdf:resource="&profileHierarchy;#Book"/>
</owl:ObjectProperty>

<owl:ObjectProperty rdf:ID="deliveryType">
  <rdfs:domain rdf:resource="#Shipment"/>
  <rdfs:range rdf:resource="#DeliveryType"/>
</owl:ObjectProperty>

<owl:ObjectProperty rdf:ID="packagingType">
  <rdfs:domain rdf:resource="#Shipment"/>
  <rdfs:range rdf:resource="#PackagingType"/>
</owl:ObjectProperty>


<owl:Class rdf:ID="CreditCard">
  <rdfs:subClassOf>
    <owl:Restriction>
       <owl:onProperty rdf:resource="#cardNumber"/>
       <owl:cardinality rdf:datatype="&xsd;#integer">1</owl:cardinality>
    </owl:Restriction>
  </rdfs:subClassOf>
  <rdfs:subClassOf>
    <owl:Restriction>
       <owl:onProperty rdf:resource="#cardType"/>
       <owl:cardinality rdf:datatype="&xsd;#integer">1</owl:cardinality>
    </owl:Restriction>
  </rdfs:subClassOf>
  <rdfs:subClassOf>
    <owl:Restriction>
       <owl:onProperty rdf:resource="#cardExpiration"/>
       <owl:cardinality rdf:datatype="&xsd;#integer">1</owl:cardinality>
    </owl:Restriction>
  </rdfs:subClassOf>
  <rdfs:subClassOf>
    <owl:Restriction>
       <owl:onProperty rdf:resource="#validity"/>
       <owl:cardinality rdf:datatype="&xsd;#integer">1</owl:cardinality>
    </owl:Restriction>
  </rdfs:subClassOf>
</owl:Class>

<owl:DatatypeProperty rdf:ID="cardNumber">
  <rdfs:domain rdf:resource="#CreditCard"/>
  <rdfs:range rdf:resource="&xsd;#decimal"/>
</owl:DatatypeProperty>

<owl:ObjectProperty rdf:ID="cardType">
  <rdfs:domain rdf:resource="#CreditCard"/>
  <rdfs:range rdf:resource="#CreditCardType"/>
</owl:ObjectProperty>

<owl:DatatypeProperty rdf:ID="cardExpiration">
  <rdfs:domain rdf:resource="#CreditCard"/>
  <rdfs:range rdf:resource="&xsd;#gYearMonth"/>
</owl:DatatypeProperty>

<owl:ObjectProperty rdf:ID="validity">
  <rdfs:domain rdf:resource="#CreditCard"/>
  <rdfs:range rdf:resource="#ValidityType"/>
</owl:ObjectProperty>

<owl:Class rdf:ID="OrderShippedAcknowledgment"/>

<owl:Class rdf:ID="FailureNotification">
  <owl:oneOf rdf:parseType="Collection">
    <FailureNotification rdf:ID="NotifyBookNotFound"/>
    <FailureNotification rdf:ID="NotifyBookOutOfStock"/>
  </owl:oneOf>
</owl:Class>

<owl:Class rdf:ID="ExpressCongoBuyOutputType">
  <owl:unionOf rdf:parseType="Collection">
    <owl:Class rdf:about="#OrderShippedAcknowledgment"/>
    <owl:Class rdf:about="#FailureNotification"/>
  </owl:unionOf>
</owl:Class>

<owl:Class rdf:ID="FullCongoBuyOutputType">
  <owl:unionOf rdf:parseType="Collection">
    <owl:Class rdf:about="#OrderShippedAcknowledgment"/>
    <owl:Class rdf:about="#FailureNotification"/>
  </owl:unionOf>
</owl:Class>

<owl:Class rdf:ID="LocateBookOutputType">
  <rdfs:comment>
    If successful, LocateBook returns an ISBN;
    otherwise, it returns a FailureNotification.
  </rdfs:comment>
  <owl:unionOf rdf:parseType="Collection">
    <owl:Class rdf:about="&profileHierarchy;#ISBN"/>
    <owl:Class rdf:about="#FailureNotification"/>
  </owl:unionOf>
</owl:Class>

<owl:Class rdf:ID="InStockBook">
  <rdfs:comment>
     The set of books that are found in stock of Congo.
  </rdfs:comment>
  <rdfs:subClassOf rdf:resource="&profileHierarchy;#Book"/>
</owl:Class>

<owl:Class rdf:ID="OutOfStockBook">
  <rdfs:comment>
     The set of books that are NOT found in stock of Congo.
  </rdfs:comment>
  <rdfs:subClassOf rdf:resource="&profileHierarchy;#Book"/>
  <owl:disjointWith rdf:resource="#InStockBook"/>
</owl:Class>

<owl:ObjectProperty rdf:ID="hasBook">
  <rdfs:comment>
     Inverse of hasISBN property, i.e. relate an ISBN number
     to a book.
  </rdfs:comment>
  <owl:inverseOf rdf:resource="&profileHierarchy;#hasISBN"/>
</owl:ObjectProperty>

<owl:Class rdf:ID="SignInData"/>

<owl:DatatypeProperty rdf:ID="acctName">
  <rdfs:domain rdf:resource="#SignInData"/>
  <rdfs:range rdf:resource="&xsd;#string"/>
</owl:DatatypeProperty>

<owl:DatatypeProperty rdf:ID="password">
  <rdfs:domain rdf:resource="#SignInData"/>
  <rdfs:range rdf:resource="&xsd;#string"/>
</owl:DatatypeProperty>

<owl:Class rdf:ID="UserProfileInfo"/>

<owl:Class rdf:ID="AcctInfo">
 <owl:unionOf rdf:parseType="Collection">
    <owl:Class rdf:about="#SignInData"/>
    <owl:Class rdf:about="#UserProfileInfo"/>
 </owl:unionOf>
</owl:Class>

<owl:Class rdf:ID="AcctID"/>

<owl:ObjectProperty rdf:ID="hasAcctID">
  <rdfs:comment>
     An account exists if there is an account ID associated
     with it.
  </rdfs:comment>
  <rdf:type rdf:resource="&owl;#FunctionalProperty"/>
  <rdfs:domain rdf:resource="#AcctInfo"/>
  <rdfs:range rdf:resource="#AcctID"/>
</owl:ObjectProperty>

<owl:Class rdf:ID="NonExistingAcct">
  <rdfs:comment>
     If there is no account ID for an account then that
     account simply does not exist
  </rdfs:comment>
  <owl:intersectionOf rdf:parseType="Collection">
    <owl:Class rdf:about="#AcctInfo"/>
    <owl:Restriction>
       <owl:onProperty rdf:resource="#hasAcctID"/>
       <owl:maxCardinality rdf:datatype="&xsd;#integer">0</owl:maxCardinality>
    </owl:Restriction>
  </owl:intersectionOf>
</owl:Class>

<!-- Shopping cart

TBD: This class is not currently used.

-->

<owl:Class rdf:ID="Cart">
  <rdfs:comment>
    The Cart Class, which is simply a list of Books, is used to record
    books selected by a customer during a shopping session.  Various
    processes like AddToCart, RemoveFromCart, itemInCart?, etc. can be
    defined using the Cart Class as the structure manipulated.  So the
    output/effect of these processes would manipulate the cart to add,
    delete items.  (These manipulations are not yet specified here.)
  </rdfs:comment>
  <owl:intersectionOf rdf:parseType="Collection">
    <owl:Class rdf:about="&objList;#List"/>
    <owl:Restriction>
      <owl:onProperty rdf:resource="&objList;#first"/>
      <owl:allValuesFrom rdf:resource="&profileHierarchy;#Book"/>
    </owl:Restriction>
    <owl:Restriction>
      <owl:onProperty rdf:resource="&objList;#rest"/>
      <owl:allValuesFrom rdf:resource="#Cart"/>
    </owl:Restriction>
  </owl:intersectionOf>
</owl:Class>


<!-- ###########################################
     Conditions and Effects used in the Congo example

Note that in general, it is not necessary to declare and name
conditions and effects separately from the processes to which they
apply (although in many cases this may well be useful).

Currently, each of these is a place-holder, empty condition.

     ###########################################
-->

<!--
-->

<expr:SWRL-Condition rdf:ID="CreditExists">
  <expr:expressionLanguage rdf:resource="&expr;#SWRL"/>
  <expr:expressionObject>
    <swrl:AtomList rdf:about="&rdf;#nil"/>
  </expr:expressionObject>
</expr:SWRL-Condition>


<!--###################################################
    ###################################################
    THE ATOMIC PROCESS ExpressCongoBuy
    ###################################################
    ###################################################-->


<process:AtomicProcess rdf:ID="ExpressCongoBuy">
  <rdfs:comment>
    This is an express "one shot" service for buying a book
    with Congo.  It takes as input a Book ISBN number and
    the customer's sign-in information, and has the effect of
    ordering the book if the book is in stock.  In this case,
    the output of the service is a message saying the book 
    is ordered.  If the book is not in stock, the output says 
    that the book is out of stock. 
  </rdfs:comment>
  <process:hasInput>
    <process:Input rdf:ID="ExpressCongoBuyBookISBN">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&profileHierarchy;#ISBN</process:parameterType>
    </process:Input>
  </process:hasInput>

  <process:hasInput>
    <process:Input rdf:ID="ExpressCongoBuySignInInfo">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#SignInData</process:parameterType>
    </process:Input>
  </process:hasInput>

  <process:hasInput>
    <process:Input rdf:ID="ExpressCongoBuyCreditCardNumber">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&xsd;#decimal</process:parameterType>
    </process:Input>
  </process:hasInput>
  
  <process:hasInput>
    <process:Input rdf:ID="ExpressCongoBuyCreditCardType">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#CreditCardType</process:parameterType>  
    </process:Input>
  </process:hasInput>
  
  <process:hasInput>
    <process:Input rdf:ID="ExpressCongoBuyCreditCardExpirationDate">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&xsd;#gYearMonth</process:parameterType>
    </process:Input>
  </process:hasInput>

  <process:hasLocal>
    <process:Local rdf:ID="ExpressCongoBuyAcctID">
      <rdfs:comment>
        This is a local variable that represents the associated 
        account ID for the given sign-in info. The existence of 
        this value indicates that the sign-in info is valid an
        account exists.
      </rdfs:comment>
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#AcctID</process:parameterType>
    </process:Local>
  </process:hasLocal>

  <process:hasLocal>
    <process:Local rdf:ID="ExpressCongoBuyCreditCard">
      <rdfs:comment>
        This is a local variable that represents the associated 
        credit card for the given card number.
      </rdfs:comment>
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#CreditCard</process:parameterType>
    </process:Local>
  </process:hasLocal>

  <process:hasPrecondition>
    <expr:SWRL-Condition rdf:ID="ExpressCongoBuyAcctExists">
      <rdfs:label>hasAcctID(ExpressCongoBuySignInInfo, ExpressCongoBuyAcctID)</rdfs:label>
      <expr:expressionLanguage rdf:resource="&expr;#SWRL"/>
        <expr:expressionObject>
          <swrl:AtomList>
            <rdf:first>
              <swrl:IndividualPropertyAtom>
                <swrl:propertyPredicate rdf:resource="#hasAcctID"/>
                <swrl:argument1 rdf:resource="#ExpressCongoBuySignInInfo"/>
                <swrl:argument2 rdf:resource="#ExpressCongoBuyAcctID"/>
              </swrl:IndividualPropertyAtom>
            </rdf:first>
            <rdf:rest rdf:resource="&rdf;#nil"/>
          </swrl:AtomList>
        </expr:expressionObject>
    </expr:SWRL-Condition>
  </process:hasPrecondition>

  <process:hasPrecondition>
    <expr:SWRL-Condition rdf:ID="ExpressCongoBuyCreditExists">
      <rdfs:label>cardNumber(ExpressCongoBuyCreditCard, ExpressCongoBuyCreditCardNumber) 
                  &amp; validity(ExpressCongoBuyCreditCard, Valid)</rdfs:label>
      <rdfs:comment>
         Typically this condition should also say that given credit card type and
         expiration date is also correct for the credit card. Those details are left
         out for this example.
      </rdfs:comment>
      <expr:expressionObject>
        <swrl:AtomList>
          <rdf:first>
           <swrl:DatavaluedPropertyAtom>
             <swrl:propertyPredicate rdf:resource="#cardNumber"/>
             <swrl:argument1 rdf:resource="#ExpressCongoBuyCreditCard"/>
             <swrl:argument2 rdf:resource="#ExpressCongoBuyCreditCardNumber"/>
           </swrl:DatavaluedPropertyAtom> 
          </rdf:first>
          <rdf:rest>
            <swrl:AtomList>
              <rdf:first>
                <swrl:IndividualPropertyAtom>
                  <swrl:propertyPredicate rdf:resource="#validity"/>
                  <swrl:argument1 rdf:resource="#ExpressCongoBuyCreditCard"/>
                  <swrl:argument2 rdf:resource="#Valid"/>
                </swrl:IndividualPropertyAtom>
              </rdf:first>
              <rdf:rest rdf:resource="&rdf;#nil"/>
            </swrl:AtomList>
          </rdf:rest>
        </swrl:AtomList>
      </expr:expressionObject>
    </expr:SWRL-Condition>
  </process:hasPrecondition>
  
  <process:hasOutput> 
    <process:Output rdf:ID="ExpressCongoBuyOutput">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#ExpressCongoBuyOutputType</process:parameterType>
    </process:Output>
  </process:hasOutput>

  <process:hasResult>
    <process:Result rdf:ID="ExpressCongoBuyPositiveResult">
      <rdfs:comment>
        If the book is in stock, then the result is that the
            order was shipped and an appropriate acknowledgment is output.
      </rdfs:comment>
      <process:hasResultVar>
         <process:ResultVar rdf:ID="ExpressCongoBuyBook">
            <rdfs:comment>Thee book identified by the given ISBN input</rdfs:comment>
            <process:parameterType rdf:datatype="&xsd;#anyURI">&profileHierarchy;#Book</process:parameterType>
         </process:ResultVar>
      </process:hasResultVar>
      <process:hasResultVar>
         <process:ResultVar rdf:ID="ExpressCongoBuyShipment">
            <rdfs:comment>The shipment that gets generated on a successful purchase</rdfs:comment>
            <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#Shipment</process:parameterType>
         </process:ResultVar>
      </process:hasResultVar>
      <process:inCondition>
          <expr:SWRL-Condition rdf:ID="ExpressCongoBuyBookInStock">
            <rdfs:label>hasISBN(ExpressCongoBuyBook, ExpressCongoBuyISBN) &amp; InStockBook(ExpressCongoBuyBook)</rdfs:label>
            <expr:expressionObject>
              <swrl:AtomList>
                <rdf:first>
                  <swrl:IndividualPropertyAtom>
                    <swrl:propertyPredicate rdf:resource="&profileHierarchy;#hasISBN"/>
                    <swrl:argument1 rdf:resource="#ExpressCongoBuyBook"/>
                    <swrl:argument2 rdf:resource="#ExpressCongoBuyBookISBN"/>
                  </swrl:IndividualPropertyAtom>
                </rdf:first>
                <rdf:rest>
                  <swrl:AtomList>
                    <rdf:first>
                      <swrl:ClassAtom>
                        <swrl:classPredicate rdf:resource="#InStockBook"/>
                        <swrl:argument1 rdf:resource="#ExpressCongoBuyBook"/>
                      </swrl:ClassAtom>
                    </rdf:first>
                    <rdf:rest rdf:resource="&rdf;#nil"/>
                  </swrl:AtomList>
                </rdf:rest>
              </swrl:AtomList>
            </expr:expressionObject>
          </expr:SWRL-Condition>
      </process:inCondition>
      <process:hasEffect>
        <expr:SWRL-Expression>
          <rdfs:comment>
            This expression says that the ExpressCongoBuyOutput will be of type
            OrderShippedAcknowledgment.
          </rdfs:comment>
          <expr:expressionObject>
            <swrl:AtomList>
              <rdf:first>
               <swrl:ClassAtom>
                 <swrl:argument1 rdf:resource="#ExpressCongoBuyOutput"/>
                 <swrl:classPredicate rdf:resource="#OrderShippedAcknowledgment"/>
               </swrl:ClassAtom>
              </rdf:first>
              <rdf:rest rdf:resource="&rdf;#nil"/>
            </swrl:AtomList>
          </expr:expressionObject>
        </expr:SWRL-Expression>
      </process:hasEffect>
      <process:hasEffect>
        <expr:SWRL-Expression rdf:ID="ExpressCongoOrderShippedEffect">
          <rdfs:comment>
            This expression says that the selected book is shipped to the account
          </rdfs:comment>
            <expr:expressionObject>
              <swrl:AtomList>
                <rdf:first>
                  <swrl:ClassAtom>
                    <swrl:classPredicate rdf:resource="#Shipment"/>
                    <swrl:argument1 rdf:resource="#ExpressCongoBuyShipment"/>
                  </swrl:ClassAtom>
                </rdf:first>
                <rdf:rest>
                  <swrl:AtomList>
                    <rdf:first>
                      <swrl:IndividualPropertyAtom>
                        <swrl:propertyPredicate rdf:resource="#shippedTo"/>
                        <swrl:argument1 rdf:resource="#ExpressCongoBuyShipment"/>
                        <swrl:argument2 rdf:resource="#ExpressCongoBuyAcctID"/>
                      </swrl:IndividualPropertyAtom>
                    </rdf:first>
                    <rdf:rest>
                      <swrl:AtomList>
                        <rdf:first>
                          <swrl:IndividualPropertyAtom>
                            <swrl:propertyPredicate rdf:resource="#shippedBook"/>
                            <swrl:argument1 rdf:resource="#ExpressCongoBuyShipment"/>
                            <swrl:argument2 rdf:resource="#ExpressCongoBuyBook"/>
                          </swrl:IndividualPropertyAtom>
                        </rdf:first>
                        <rdf:rest rdf:resource="&rdf;#nil"/>
                      </swrl:AtomList>
                    </rdf:rest>
                  </swrl:AtomList>
                </rdf:rest>
              </swrl:AtomList>
            </expr:expressionObject>
        </expr:SWRL-Expression>
      </process:hasEffect>
    </process:Result>
  </process:hasResult>
  
  <process:hasResult> 
    <process:Result rdf:ID="ExpressCongoBuyNegativeResult">
      <rdfs:comment>
             If the book is out of stock, then the result is simply
             that an appropriate acknowledgment is output, indicating 
         that the book is out of stock.
      </rdfs:comment>
      <process:inCondition>
          <expr:SWRL-Condition rdf:ID="ExpressCongoBuyBookOutOfStock">
            <expr:expressionObject>
              <swrl:AtomList>
                <rdf:first>
                  <swrl:ClassAtom>
                    <swrl:classPredicate>
                      <owl:Restriction>
                         <owl:onProperty rdf:resource="#hasBook"/>
                         <owl:allValuesFrom rdf:resource="#OutOfStockBook"/>
                      </owl:Restriction>
                    </swrl:classPredicate>
                    <swrl:argument1 rdf:resource="#ExpressCongoBuyBookISBN"/>
                  </swrl:ClassAtom>
                </rdf:first>
                <rdf:rest rdf:resource="&rdf;#nil"/>
              </swrl:AtomList>
            </expr:expressionObject>
          </expr:SWRL-Condition>
      </process:inCondition>
      <process:hasEffect>
        <expr:SWRL-Expression>
          <rdfs:comment>
            This expression just says that the value of ExpressCongoBuyOutput will be 
            NotifyBookOutOfStock.
          </rdfs:comment>
          <expr:expressionObject>
            <swrl:AtomList>
              <rdf:first>
                <swrl:SameIndividualAtom>
                  <swrl:argument1 rdf:resource="#ExpressCongoBuyOutput"/>
                  <swrl:argument2 rdf:resource="#NotifyBookOutOfStock"/>
                </swrl:SameIndividualAtom> 
              </rdf:first>
              <rdf:rest rdf:resource="&rdf;#nil"/>
            </swrl:AtomList>
          </expr:expressionObject>
        </expr:SWRL-Expression>
      </process:hasEffect>
    </process:Result>
  </process:hasResult>
  
</process:AtomicProcess>  

<!-- closure of ExpressCongoBuy -->

<!--###################################################
    ###################################################
    THE COMPOSITE PROCESS: FullCongoBuy
    ###################################################
    ###################################################-->

<!-- 

Now for the full-fledged book-buying process, FullCongoBuy. This
is more complicated since it has to specify the process control structure
including alternatives, conditional executions, etc. 

We build the class recursively in a top-down manner. The basic idea is
that each CompositeProcess is composedOf a ControlConstruct, which may
be a Sequence, Alternative, If-Then-Else, etc.  Each such
ConstrolConstruct, in turn, has a "components" property (a list or
bag), which specifies the subcomponents of the ControlConstruct. These
classes are themselves control constructs.  Finally we bottom out when
the components of a composite process are invocaitons ("performs") of
atomic processes.

In the full Congo example we assume the following basic structure for
the composition. The main steps are to locate a book and to then buy
it. While (for exposition) we assume that the locate book is an atomic
process (without components), the buying of a book involves a sequence
of subprocesses that correspond to specifying a payment method,
specifying the details of delivery (address, wrapping type, etc.) and
finalizing the buy process. These are the component subprocesses of
the sequence corresponding to the full-fledged buying process. The
detailed buying sequence involves a sequence of component
sub-processes corresponding to putting the book into a cart, followed
by a signing-in choice, followed by a method of payment selection. The
signing-in choice process is itself a composite process which offers
the alternatives of signing in as a new user (creating an account) or
using a stored profile instead. Each of these processes is itself
composite, bottoming out in a sequence of atomic processes
corresponding to signing in or creating a new account/profile.  -->


<process:CompositeProcess rdf:ID="FullCongoBuy">
  <rdfs:comment>
    This composite process is composed of a sequence that performs an atomic
    process, LocateBook, and a composite process, CongoBuyBook.
  </rdfs:comment>
  <process:hasInput>
    <process:Input rdf:ID="FullCongoBuyBookName">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&xsd;#string</process:parameterType>
    </process:Input>
  </process:hasInput>

  <process:hasInput>
    <process:Input rdf:ID="FullCongoBuyCreateAcctInfo">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#AcctInfo</process:parameterType>
    </process:Input>
  </process:hasInput>

  <process:hasInput>
    <process:Input rdf:ID="FullCongoBuySignInData">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#SignInData</process:parameterType>
    </process:Input>
  </process:hasInput>

  <process:hasInput>
    <process:Input rdf:ID="FullCongoBuyCreditCardNumber">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&xsd;#decimal</process:parameterType>
    </process:Input>
  </process:hasInput>
  
  <process:hasInput>
    <process:Input rdf:ID="FullCongoBuyCreditCardType">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#CreditCardType</process:parameterType>  
    </process:Input>
  </process:hasInput>
  
  <process:hasInput>
    <process:Input rdf:ID="FullCongoBuyCreditCardExpirationDate">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&xsd;#gYearMonth</process:parameterType>
    </process:Input>
  </process:hasInput>
  
  <process:hasInput>
    <process:Input rdf:ID="FullCongoBuyDeliveryAddress">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&xsd;#string</process:parameterType>
    </process:Input>
  </process:hasInput>
  
  <process:hasInput>
    <process:Input rdf:ID="FullCongoBuyPackagingSelection">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&xsd;#string</process:parameterType>
    </process:Input>
  </process:hasInput>
  
  <process:hasInput>
    <process:Input rdf:ID="FullCongoBuyDeliveryTypeSelection">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#DeliveryType</process:parameterType>
    </process:Input>
  </process:hasInput>

  <process:hasOutput>
    <process:Output rdf:ID="FullCongoBuyCreateAcctOutput">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#AcctID</process:parameterType>
    </process:Output>
  </process:hasOutput>

  <process:hasOutput>
    <process:Output rdf:ID="FullCongoBuyOutput">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;FullCongoBuyOutputType</process:parameterType>
    </process:Output>
  </process:hasOutput>
  
  <process:composedOf>
    <process:Sequence>
      <process:components>
        <process:ControlConstructList>
          <objList:first>
            <process:Perform rdf:ID="LocateBookPerform">
              <process:process rdf:resource="#LocateBook"/>
              <process:hasDataFrom>
                <process:InputBinding>
                  <process:toParam rdf:resource="#LocateBookBookName"/>
                  <process:valueSource>
                    <process:ValueOf>
                      <process:theVar rdf:resource="#FullCongoBuyBookName"/>
                      <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                    </process:ValueOf>
                  </process:valueSource>
                </process:InputBinding>
              </process:hasDataFrom>
            </process:Perform>
          </objList:first>
          <objList:rest>
            <process:ControlConstructList>
              <objList:first>
                <process:If-Then-Else>
                  <process:ifCondition>
                    <expr:SWRL-Condition rdf:ID="FullCongoBuyBookInStock">
                      <expr:expressionObject>
                        <swrl:AtomList>
                          <rdf:first>
                            <swrl:DatavaluedPropertyAtom>
                              <swrl:propertyPredicate rdf:resource="&profileHierarchy;#title"/>
                              <swrl:argument1>
                                <swrl:Variable rdf:ID="aBook"/>
                              </swrl:argument1>
                              <swrl:argument2 rdf:resource="#FullCongoBuyBookName"/>
                            </swrl:DatavaluedPropertyAtom>
                          </rdf:first>
                          <rdf:rest>
                            <swrl:AtomList>
                              <rdf:first>
                                <swrl:ClassAtom>
                                  <swrl:classPredicate rdf:resource="#InStockBook"/>
                                  <swrl:argument1 rdf:resource="#aBook"/>
                                </swrl:ClassAtom>
                              </rdf:first>
                              <rdf:rest rdf:resource="&rdf;#nil"/>
                            </swrl:AtomList>
                          </rdf:rest>
                        </swrl:AtomList>
                      </expr:expressionObject>
                    </expr:SWRL-Condition>
                  </process:ifCondition>
                  <process:then>
                    <process:Perform rdf:ID="CongoBuyBookPerform">
                      <process:process rdf:resource="#CongoBuyBook"/>
                      <process:hasDataFrom>
                        <process:InputBinding>
                          <process:toParam rdf:resource="#CongoBuyBookISBN"/>
                          <process:valueSource>
                            <process:ValueOf>
                              <process:theVar rdf:resource="#LocateBookOutput"/>
                              <process:fromProcess rdf:resource="#LocateBookPerform"/>
                            </process:ValueOf>
                          </process:valueSource>
                        </process:InputBinding>
                      </process:hasDataFrom>
                      <process:hasDataFrom>
                        <process:InputBinding>
                          <process:toParam rdf:resource="#CongoBuyBookCreateAcctInfo"/>
                          <process:valueSource>
                            <process:ValueOf>
                              <process:theVar rdf:resource="#FullCongoBuyCreateAcctInfo"/>
                              <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                            </process:ValueOf>
                          </process:valueSource>
                        </process:InputBinding>
                      </process:hasDataFrom>
                      <process:hasDataFrom>
                        <process:InputBinding>
                          <process:toParam rdf:resource="#CongoBuyBookSignInData"/>
                          <process:valueSource>
                            <process:ValueOf>
                              <process:theVar rdf:resource="#FullCongoBuySignInData"/>
                              <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                            </process:ValueOf>
                          </process:valueSource>
                        </process:InputBinding>
                      </process:hasDataFrom>
                      <process:hasDataFrom>
                        <process:InputBinding>
                          <process:toParam rdf:resource="#CongoBuyBookCreditCardNumber"/>
                          <process:valueSource>
                            <process:ValueOf>
                              <process:theVar rdf:resource="#FullCongoBuyCreditCardNumber"/>
                              <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                            </process:ValueOf>
                          </process:valueSource>
                        </process:InputBinding>
                      </process:hasDataFrom>
                      <process:hasDataFrom>
                        <process:InputBinding>
                          <process:toParam rdf:resource="#CongoBuyBookCreditCardType"/>
                          <process:valueSource>
                            <process:ValueOf>
                              <process:theVar rdf:resource="#FullCongoBuyCreditCardType"/>
                              <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                            </process:ValueOf>
                          </process:valueSource>
                        </process:InputBinding>
                      </process:hasDataFrom>
                      <process:hasDataFrom>
                        <process:InputBinding>
                          <process:toParam rdf:resource="#CongoBuyBookCreditCardExpirationDate"/>
                          <process:valueSource>
                            <process:ValueOf>
                              <process:theVar rdf:resource="#FullCongoBuyCreditCardExpirationDate"/>
                              <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                            </process:ValueOf>
                          </process:valueSource>
                        </process:InputBinding>
                      </process:hasDataFrom>
                      <process:hasDataFrom>
                        <process:InputBinding>
                          <process:toParam rdf:resource="#CongoBuyBookDeliveryAddress"/>
                          <process:valueSource>
                            <process:ValueOf>
                              <process:theVar rdf:resource="#FullCongoBuyDeliveryAddress"/>
                              <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                            </process:ValueOf>
                          </process:valueSource>
                        </process:InputBinding>
                      </process:hasDataFrom>
                      <process:hasDataFrom>
                        <process:InputBinding>
                          <process:toParam rdf:resource="#CongoBuyBookPackagingSelection"/>
                          <process:valueSource>
                            <process:ValueOf>
                              <process:theVar rdf:resource="#FullCongoBuyPackagingSelection"/>
                              <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                            </process:ValueOf>
                          </process:valueSource>
                        </process:InputBinding>
                      </process:hasDataFrom>
                      <process:hasDataFrom>
                        <process:InputBinding>
                          <process:toParam rdf:resource="#CongoBuyBookDeliveryTypeSelection"/>
                          <process:valueSource>
                            <process:ValueOf>
                              <process:theVar rdf:resource="#FullCongoBuyDeliveryTypeSelection"/>
                              <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                            </process:ValueOf>
                          </process:valueSource>
                        </process:InputBinding>
                      </process:hasDataFrom>
                    </process:Perform>
                  </process:then>
                </process:If-Then-Else>
              </objList:first>
              <objList:rest rdf:resource="&objList;#nil"/>
            </process:ControlConstructList>
          </objList:rest>
        </process:ControlConstructList>
      </process:components>
    </process:Sequence>
  </process:composedOf>

  <process:hasResult>
    <process:Result rdf:ID="FullCongoBuyPositiveResult">
      <rdfs:comment>
        When the book is in stock, return an instance of OrderShippedAcknowledgment,
        and the Acct ID (from CongoBuyBookCreateAcctOutput).
      </rdfs:comment>
      <process:hasResultVar>
         <process:ResultVar rdf:ID="FullCongoBuyShipment">
            <rdfs:comment>The shipment that gets generated on a successful purchase</rdfs:comment>
            <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#Shipment</process:parameterType>
         </process:ResultVar>
      </process:hasResultVar>
      <process:inCondition rdf:resource="#FullCongoBuyBookInStock"/>
      <process:withOutput>
        <process:OutputBinding>
          <process:toParam rdf:resource="#FullCongoBuyCreateAcctOutput"/>
          <process:valueSource>
            <process:ValueOf>
              <process:theVar rdf:resource="#CongoBuyBookCreateAcctOutput"/>
              <process:fromProcess rdf:resource="#CongoBuyBookPerform"/>
            </process:ValueOf>
          </process:valueSource>
        </process:OutputBinding>
      </process:withOutput>
      <process:hasEffect>
        <expr:SWRL-Expression>
          <rdfs:comment>
            This expression just says that the FullCongoBuyOutput will be of type
            OrderShippedAcknowledgment.
          </rdfs:comment>
          <expr:expressionObject>
            <swrl:AtomList>
              <rdf:first>
               <swrl:ClassAtom>
                 <swrl:argument1 rdf:resource="#FullCongoBuyOutput"/>
                 <swrl:classPredicate rdf:resource="#OrderShippedAcknowledgment"/>
               </swrl:ClassAtom> 
              </rdf:first>
              <rdf:rest rdf:resource="&rdf;#nil"/>
            </swrl:AtomList>
          </expr:expressionObject>
        </expr:SWRL-Expression>
      </process:hasEffect>
      <process:hasEffect>
        <expr:SWRL-Expression rdf:ID="FullCongoOrderShippedEffect">
          <rdfs:comment>
            This expression says that the selected book is shipped to the account.
            (This expression is not complete yet, it needs to relate the shipment
            to the located book and user's account. See ExpressCongo for a more
            complete example)
          </rdfs:comment>
            <expr:expressionObject>
              <swrl:AtomList>
                <rdf:first>
                  <swrl:ClassAtom>
                    <swrl:classPredicate rdf:resource="#Shipment"/>
                    <swrl:argument1 rdf:resource="#FullCongoBuyShipment"/>
                  </swrl:ClassAtom>
                </rdf:first>
                <rdf:rest rdf:resource="&rdf;#nil"/>
              </swrl:AtomList>
            </expr:expressionObject>
        </expr:SWRL-Expression>
      </process:hasEffect>
    </process:Result>
  </process:hasResult>

  <process:hasResult>
    <process:Result rdf:ID="FullCongoBuyNegativeResult">
      <rdfs:comment>
        When the book is out-of-stock, return the value returned by
        LocateBook (an instance of FailureNotification).  FullCongoBuyCreateAcctOutput
        is left unspecified (it will be a null value).
      </rdfs:comment>
      <process:inCondition>
        <expr:SWRL-Condition rdf:ID="FullCongoBuyBookOutOfStock">
          <expr:expressionObject>
            <swrl:AtomList>
              <rdf:first>
                <swrl:DatavaluedPropertyAtom>
                  <swrl:propertyPredicate rdf:resource="&profileHierarchy;#title"/>
                  <swrl:argument1 rdf:resource="#aBook"/>
                  <swrl:argument2 rdf:resource="#FullCongoBuyBookName"/>
                </swrl:DatavaluedPropertyAtom>
              </rdf:first>
              <rdf:rest>
                <swrl:AtomList>
                  <rdf:first>
                    <swrl:ClassAtom>
                      <swrl:classPredicate rdf:resource="#OutOfStockBook"/>
                      <swrl:argument1 rdf:resource="#aBook"/>
                    </swrl:ClassAtom>
                  </rdf:first>
                  <rdf:rest rdf:resource="&rdf;#nil"/>
                </swrl:AtomList>
              </rdf:rest>
            </swrl:AtomList>
          </expr:expressionObject>
         </expr:SWRL-Condition>
      </process:inCondition>
      <process:withOutput>
        <process:OutputBinding>
          <process:toParam rdf:resource="#FullCongoBuyOutput"/>
          <process:valueSource>
            <process:ValueOf>
              <process:theVar rdf:resource="#LocateBookOutput"/>
              <process:fromProcess rdf:resource="#LocateBookPerform"/>
            </process:ValueOf>
          </process:valueSource>
        </process:OutputBinding>
      </process:withOutput>
    </process:Result>
  </process:hasResult>

</process:CompositeProcess>  <!-- End of Full Congo Buy -->


<!--###################################################
    CongoBuyBook
    ###################################################-->

<process:CompositeProcess rdf:ID="CongoBuyBook">
  <rdfs:comment>
    Control structure for CongoBuyBook:
    Perform composite process BuySequence
    Perform atomic process SpecifyDeliveryDetails
    Perform atomic process FinalizeBuy
  </rdfs:comment>

  <process:hasInput>
    <process:Input rdf:ID="CongoBuyBookISBN">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&profileHierarchy;#ISBN</process:parameterType>
    </process:Input>
  </process:hasInput>

  <process:hasInput>
    <process:Input rdf:ID="CongoBuyBookCreateAcctInfo">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#AcctInfo</process:parameterType>
    </process:Input>
  </process:hasInput>

  <process:hasInput>
    <process:Input rdf:ID="CongoBuyBookSignInData">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#SignInData</process:parameterType>
    </process:Input>
  </process:hasInput>

  <process:hasInput>
    <process:Input rdf:ID="CongoBuyBookCreditCardNumber">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&xsd;#string</process:parameterType>
    </process:Input>
  </process:hasInput>

  <process:hasInput>
    <process:Input rdf:ID="CongoBuyBookCreditCardType">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#CreditCardType</process:parameterType>
    </process:Input>
  </process:hasInput>

  <process:hasInput>
    <process:Input rdf:ID="CongoBuyBookCreditCardExpirationDate">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&time;#Instant</process:parameterType>
    </process:Input>
  </process:hasInput>

  <process:hasInput>
    <process:Input rdf:ID="CongoBuyBookDeliveryAddress">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&xsd;#string</process:parameterType>
    </process:Input>
  </process:hasInput>

  <process:hasInput>
    <process:Input rdf:ID="CongoBuyBookPackagingSelection">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#PackagingType</process:parameterType>
    </process:Input>
  </process:hasInput>

  <process:hasInput>
    <process:Input rdf:ID="CongoBuyBookDeliveryTypeSelection">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#DeliveryType</process:parameterType>
    </process:Input>
  </process:hasInput>
  
  <process:hasOutput>
    <process:Output rdf:ID="CongoBuyBookCreateAcctOutput">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#AcctID</process:parameterType>
    </process:Output>
  </process:hasOutput>

  <process:composedOf>
    <process:Sequence>
      <process:components>
        <process:ControlConstructList>
          <objList:first>
            <process:Perform rdf:ID="BuySequencePerform">
              <process:process rdf:resource="#BuySequence"/>
              <process:hasDataFrom>
                <process:InputBinding>
                  <process:toParam rdf:resource="#BuySequenceBookISBN"/>
                  <process:valueSource>
                    <process:ValueOf>
                      <process:theVar rdf:resource="#CongoBuyBookISBN"/>
                      <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                    </process:ValueOf>
                  </process:valueSource>
                </process:InputBinding>
              </process:hasDataFrom>              
              <process:hasDataFrom>
                <process:InputBinding>
                  <process:toParam rdf:resource="#BuySequenceCreateAcctInfo"/>
                  <process:valueSource>
                    <process:ValueOf>
                      <process:theVar rdf:resource="#CongoBuyBookCreateAcctInfo"/>
                      <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                    </process:ValueOf>
                  </process:valueSource>
                </process:InputBinding>
              </process:hasDataFrom>              
              <process:hasDataFrom>
                <process:InputBinding>
                  <process:toParam rdf:resource="#BuySequenceSignInData"/>
                  <process:valueSource>
                    <process:ValueOf>
                      <process:theVar rdf:resource="#CongoBuyBookSignInData"/>
                      <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                    </process:ValueOf>
                  </process:valueSource>
                </process:InputBinding>
              </process:hasDataFrom>              
              <process:hasDataFrom>
                <process:InputBinding>
                  <process:toParam rdf:resource="#BuySequenceCreditCardNumber"/>
                  <process:valueSource>
                    <process:ValueOf>
                      <process:theVar rdf:resource="#CongoBuyBookCreditCardNumber"/>
                      <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                    </process:ValueOf>
                  </process:valueSource>
                </process:InputBinding>
              </process:hasDataFrom>
              <process:hasDataFrom>
                <process:InputBinding>
                  <process:toParam rdf:resource="#BuySequenceCreditCardType"/>
                  <process:valueSource>
                    <process:ValueOf>
                      <process:theVar rdf:resource="#CongoBuyBookCreditCardType"/>
                      <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                    </process:ValueOf>
                  </process:valueSource>
                </process:InputBinding>
              </process:hasDataFrom>
              <process:hasDataFrom>
                <process:InputBinding>
                  <process:toParam rdf:resource="#BuySequenceCreditCardExpirationDate"/>
                  <process:valueSource>
                    <process:ValueOf>
                      <process:theVar rdf:resource="#CongoBuyBookCreditCardExpirationDate"/>
                      <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                    </process:ValueOf>
                  </process:valueSource>
                </process:InputBinding>
              </process:hasDataFrom>
            </process:Perform>
          </objList:first>
          <objList:rest>
            <process:ControlConstructList>
              <objList:first>
                <process:Perform rdf:ID="SpecifyDeliveryDetailsPerform">
                  <process:process rdf:resource="#SpecifyDeliveryDetails"/>
                  <process:hasDataFrom>
                    <process:InputBinding>
                      <process:toParam rdf:resource="#DeliveryAddress"/>
                      <process:valueSource>
                        <process:ValueOf>
                          <process:theVar rdf:resource="#CongoBuyBookDeliveryAddress"/>
                          <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                        </process:ValueOf>
                      </process:valueSource>
                    </process:InputBinding>
                  </process:hasDataFrom>
                  <process:hasDataFrom>
                    <process:InputBinding>
                      <process:toParam rdf:resource="#PackagingSelection"/>
                      <process:valueSource>
                        <process:ValueOf>
                          <process:theVar rdf:resource="#CongoBuyBookPackagingSelection"/>
                          <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                        </process:ValueOf>
                      </process:valueSource>
                    </process:InputBinding>
                  </process:hasDataFrom>
                  <process:hasDataFrom>
                    <process:InputBinding>
                      <process:toParam rdf:resource="#DeliveryTypeSelection"/>
                      <process:valueSource>
                        <process:ValueOf>
                          <process:theVar rdf:resource="#CongoBuyBookDeliveryTypeSelection"/>
                          <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                        </process:ValueOf>
                      </process:valueSource>
                    </process:InputBinding>
                  </process:hasDataFrom>
                </process:Perform>
              </objList:first>
              <objList:rest>
                <process:ControlConstructList>
                  <objList:first>
                    <process:Perform rdf:ID="FinalizeBuyPerform">
                      <process:process rdf:resource="#FinalizeBuy"/>
                    </process:Perform>
                  </objList:first>
                  <objList:rest rdf:resource="&objList;#nil"/>
                </process:ControlConstructList>
              </objList:rest>
            </process:ControlConstructList>
          </objList:rest>
        </process:ControlConstructList>
      </process:components>
    </process:Sequence>
  </process:composedOf>

  <process:hasResult>
    <process:Result>
      <process:inCondition rdf:resource="&expr;#AlwaysTrue"/>
      <process:withOutput>
        <process:OutputBinding>
          <process:toParam rdf:resource="#CongoBuyBookCreateAcctOutput"/>
          <process:valueSource>
            <process:ValueOf>
              <process:theVar rdf:resource="#BuySequenceAcctID"/>
              <process:fromProcess rdf:resource="#BuySequencePerform"/>
            </process:ValueOf>
          </process:valueSource>
        </process:OutputBinding>
      </process:withOutput>
    </process:Result>
  </process:hasResult>

</process:CompositeProcess>


<!--###################################################
    BuySequence
    ###################################################-->

<process:CompositeProcess rdf:ID="BuySequence">
  <rdfs:comment>
    BuySequence is a sequence that performs an atomic process
    PutInCart, followed by a composite process SignInAlternatives,
    followed by an atomic process SpecifyPaymentMethod.
  </rdfs:comment>

  <process:hasInput>
    <process:Input rdf:ID="BuySequenceBookISBN">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&profileHierarchy;#ISBN</process:parameterType> 
   </process:Input>
  </process:hasInput>
  
  <process:hasInput>
    <process:Input rdf:ID="BuySequenceCreateAcctInfo">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#AcctInfo</process:parameterType>
    </process:Input>
  </process:hasInput>
  
  <process:hasInput>
    <process:Input rdf:ID="BuySequenceSignInData">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#SignInData</process:parameterType>
    </process:Input>
  </process:hasInput>
  
  <process:hasInput>  
    <process:Input rdf:ID="BuySequenceCreditCardNumber">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&xsd;#decimal</process:parameterType>
    </process:Input>
  </process:hasInput>
  
  <process:hasInput>
    <process:Input rdf:ID="BuySequenceCreditCardType">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#CreditCardType</process:parameterType>  
    </process:Input>
  </process:hasInput>
  
  <process:hasInput>
    <process:Input rdf:ID="BuySequenceCreditCardExpirationDate">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&time;#Instant</process:parameterType>
    </process:Input>
  </process:hasInput>
  
  <process:hasOutput>
    <process:Output rdf:ID="BuySequenceAcctID">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#AcctID</process:parameterType>
    </process:Output>
  </process:hasOutput>

  <process:composedOf>
    <process:Sequence>
      <process:components>
        <process:ControlConstructList>
          <objList:first>
            <process:Perform rdf:ID="PutInCartPerform">
              <process:process rdf:resource="#PutInCart"/>
              <process:hasDataFrom>
                <process:InputBinding>
                  <process:toParam rdf:resource="#PutInCartBookISBN"/>
                  <process:valueSource>
                    <process:ValueOf>
                      <process:theVar rdf:resource="#BuySequenceBookISBN"/>
                      <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                    </process:ValueOf>
                  </process:valueSource>
                </process:InputBinding>
              </process:hasDataFrom>
            </process:Perform>
          </objList:first>
          <objList:rest>
            <process:ControlConstructList>
              <objList:first>
                <process:Perform rdf:ID="SignInAlternativesPerform">
                  <process:process rdf:resource="#SignInAlternatives"/>
                  <process:hasDataFrom>
                    <process:InputBinding>
                      <process:toParam rdf:resource="#SignInAlternativesCreateAcctInfo"/>
                      <process:valueSource>
                        <process:ValueOf>
                          <process:theVar rdf:resource="#BuySequenceCreateAcctInfo"/>
                          <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                        </process:ValueOf>
                      </process:valueSource>
                    </process:InputBinding>
                  </process:hasDataFrom>
                  <process:hasDataFrom>
                    <process:InputBinding>
                      <process:toParam rdf:resource="#SignInAlternativesSignInData"/>
                      <process:valueSource>
                        <process:ValueOf>
                          <process:theVar rdf:resource="#BuySequenceSignInData"/>
                          <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                        </process:ValueOf>
                      </process:valueSource>
                    </process:InputBinding>
                  </process:hasDataFrom>
                </process:Perform>
              </objList:first>
              <objList:rest>
                <process:ControlConstructList>
                  <objList:first>
                    <process:Perform rdf:ID="SpecifyPaymentMethodPerform">
                      <process:process rdf:resource="#SpecifyPaymentMethod"/>
                      <process:hasDataFrom>
                        <process:InputBinding>
                          <process:toParam rdf:resource="#SpecifyPaymentMethodCreditCardNumber"/>
                          <process:valueSource>
                            <process:ValueOf>
                              <process:theVar rdf:resource="#BuySequenceCreditCardNumber"/>
                              <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                            </process:ValueOf>
                          </process:valueSource>
                        </process:InputBinding>
                      </process:hasDataFrom>
                      <process:hasDataFrom>
                        <process:InputBinding>
                          <process:toParam rdf:resource="#SpecifyPaymentMethodCreditCardType"/>
                          <process:valueSource>
                            <process:ValueOf>
                              <process:theVar rdf:resource="#BuySequenceCreditCardType"/>
                              <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                            </process:ValueOf>
                          </process:valueSource>
                        </process:InputBinding>
                      </process:hasDataFrom>
                      <process:hasDataFrom>
                        <process:InputBinding>
                          <process:toParam rdf:resource="#SpecifyPaymentMethodCreditCardExpirationDate"/>
                          <process:valueSource>
                            <process:ValueOf>
                              <process:theVar rdf:resource="#BuySequenceCreditCardExpirationDate"/>
                              <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                            </process:ValueOf>
                          </process:valueSource>
                        </process:InputBinding>
                      </process:hasDataFrom>
                    </process:Perform>
                  </objList:first>
                  <objList:rest rdf:resource="&objList;#nil"/>
                </process:ControlConstructList>
              </objList:rest>
             </process:ControlConstructList>
          </objList:rest>
        </process:ControlConstructList>
      </process:components>
    </process:Sequence>
  </process:composedOf>

  <process:hasResult>
    <process:Result>
      <process:inCondition rdf:resource="&expr;#AlwaysTrue"/>
      <process:withOutput>
        <process:OutputBinding>
          <process:toParam rdf:resource="#BuySequenceAcctID"/>
          <process:valueSource>
            <process:ValueOf>
              <process:theVar rdf:resource="#SignInAlternativesAcctID"/>
              <process:fromProcess rdf:resource="#SignInAlternativesPerform"/>
            </process:ValueOf>
          </process:valueSource>
        </process:OutputBinding>
      </process:withOutput>
    </process:Result>
  </process:hasResult>
    
</process:CompositeProcess>  
<!-- End of BuySequence -->


<!--###################################################
    SignInAlternatives
    ###################################################-->

<process:CompositeProcess rdf:ID="SignInAlternatives">    
  <process:hasInput>
    <process:Input rdf:ID="SignInAlternativesCreateAcctInfo">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#AcctInfo</process:parameterType>
    </process:Input>
  </process:hasInput>
  
  <process:hasInput>
    <process:Input rdf:ID="SignInAlternativesSignInData">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#SignInData</process:parameterType>
    </process:Input>
  </process:hasInput>
  
  <process:hasOutput>
    <process:Output rdf:ID="SignInAlternativesAcctID">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#AcctID</process:parameterType>
    </process:Output>
  </process:hasOutput>

  <rdfs:comment>
    SignInAlternatives is a choice whose components are a composite
    process CreateAcctSequence and a composite process SignInSequence.
    In either case, the user's account ID is returned.  It's a pre-existing
    ID in the case of SignInSequence; a new ID in the case of CreateAcctSequence.
  </rdfs:comment>

  <process:composedOf>
    <process:Choice>
      <process:components>
        <process:ControlConstructBag>
          <objList:first>
            <process:Perform rdf:ID="CreateAcctSequencePerform">
              <process:process rdf:resource="#CreateAcctSequence"/>
              <process:hasDataFrom>
                <process:InputBinding>
                  <process:toParam rdf:resource="#CreateAcctSequenceCreateAcctInfo"/>
                  <process:valueSource>
                    <process:ValueOf>
                      <process:theVar rdf:resource="#SignInAlternativesCreateAcctInfo"/>
                      <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                    </process:ValueOf>
                  </process:valueSource>
                </process:InputBinding>
              </process:hasDataFrom>
            </process:Perform>
          </objList:first>
          <objList:rest>
            <process:ControlConstructBag>
              <objList:first>
                <process:Perform rdf:ID="SignInSequencePerform">
                  <process:process rdf:resource="#SignInSequence"/>
                  <process:hasDataFrom>
                    <process:InputBinding>
                      <process:toParam rdf:resource="#SignInSequenceSignInInfo"/>
                      <process:valueSource>
                        <process:ValueOf>
                          <process:theVar rdf:resource="#SignInAlternativesSignInData"/>
                          <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                        </process:ValueOf>
                      </process:valueSource>
                    </process:InputBinding>
                  </process:hasDataFrom>
                </process:Perform>
              </objList:first>
              <objList:rest rdf:resource="&objList;#nil"/>
            </process:ControlConstructBag>
          </objList:rest>
        </process:ControlConstructBag>
      </process:components>
    </process:Choice>
  </process:composedOf>

  <process:hasResult>
    <process:Result>
      <process:inCondition>
        <expr:SWRL-Condition rdf:ID="SignInAlternativesAcctExists">
          <rdfs:label>hasAcctID(SignInAlternativesSignInData, SignInAlternativesAcctID)</rdfs:label>
          <rdfs:comment>
             If an account already exists, sign-in operation will be
             performed and returned acct ID willbe used
          </rdfs:comment>
          <expr:expressionLanguage rdf:resource="&expr;#SWRL"/>
          <expr:expressionObject>
            <swrl:AtomList>
              <rdf:first>
                <swrl:IndividualPropertyAtom>
                  <swrl:propertyPredicate rdf:resource="#hasAcctID"/>
                  <swrl:argument1 rdf:resource="#SignInAlternativesSignInData"/>
                  <swrl:argument2 rdf:resource="#SignInAlternativesAcctID"/>
                </swrl:IndividualPropertyAtom>
              </rdf:first>
              <rdf:rest rdf:resource="&rdf;#nil"/>
            </swrl:AtomList>
          </expr:expressionObject>
        </expr:SWRL-Condition>
      </process:inCondition>
      <process:withOutput>
        <process:OutputBinding>
          <process:toParam rdf:resource="#SignInAlternativesAcctID"/>
          <process:valueSource>
            <process:ValueOf>
              <process:theVar rdf:resource="#SignInSequenceAcctID"/>
              <process:fromProcess rdf:resource="#SignInSequencePerform"/>
            </process:ValueOf>
          </process:valueSource>
        </process:OutputBinding>
      </process:withOutput>
    </process:Result>
  </process:hasResult>

  <process:hasResult>
    <process:Result>
      <process:inCondition>
        <expr:SWRL-Condition rdf:ID="SignInAlternativesNoAcctExists">
          <rdfs:comment>
             If an account does not exist a new account will be
             create by the CreateAcct process and the ID of new
             account will be used.
          </rdfs:comment>
          <expr:expressionLanguage rdf:resource="&expr;#SWRL"/>
          <expr:expressionObject>
            <swrl:AtomList>
              <rdf:first>
                <swrl:ClassAtom>
                  <swrl:classPredicate rdf:resource="#NonExistingAcct"/>
                  <swrl:argument1 rdf:resource="#SignInAlternativesSignInData"/>
                </swrl:ClassAtom>
              </rdf:first>
              <rdf:rest rdf:resource="&rdf;#nil"/>
            </swrl:AtomList>
          </expr:expressionObject>
        </expr:SWRL-Condition>
      </process:inCondition>
      <process:withOutput>
        <process:OutputBinding>
          <process:toParam rdf:resource="#SignInAlternativesAcctID"/>
          <process:valueSource>
            <process:ValueOf>
              <process:theVar rdf:resource="#CreateAcctSequenceCreateAcctOutput"/>
              <process:fromProcess rdf:resource="#CreateAcctSequencePerform"/>
            </process:ValueOf>
          </process:valueSource>
        </process:OutputBinding>
      </process:withOutput>
    </process:Result>
  </process:hasResult>
</process:CompositeProcess>


<!--###################################################
    SignInSequence
    ###################################################-->

<process:CompositeProcess rdf:ID="SignInSequence">
  <rdfs:comment>
    SignInSequence performs an atomic process SignIn,
    followed by an atomic process LoadUserProfile.
  </rdfs:comment>

  <process:hasInput>
    <process:Input rdf:ID="SignInSequenceSignInInfo">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#SignInData</process:parameterType>
    </process:Input>
  </process:hasInput>
  <rdfs:comment>
    The output is a copy of the account ID from the input.
  </rdfs:comment>
  <process:hasOutput>
    <process:Output rdf:ID="SignInSequenceAcctID">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#AcctID</process:parameterType>
    </process:Output>
  </process:hasOutput>

  <process:composedOf>
    <process:Sequence>
      <process:components>
        <process:ControlConstructList>
          <objList:first>
            <process:Perform rdf:ID="SignInPerform">
              <process:process rdf:resource="#SignIn"/>
              <process:hasDataFrom>
                <process:InputBinding>
                  <process:toParam rdf:resource="#SignInInfo"/>
                  <process:valueSource>
                    <process:ValueOf>
                      <process:theVar rdf:resource="#SignInSequenceSignInInfo"/>
                      <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                    </process:ValueOf>
                  </process:valueSource>
                </process:InputBinding>
              </process:hasDataFrom>
            </process:Perform>
          </objList:first>
          <objList:rest>
            <process:ControlConstructList>
              <objList:first>
                <process:Perform rdf:ID="LoadUserProfilePerform">
                  <process:process rdf:resource="#LoadUserProfile"/>
                </process:Perform>
              </objList:first>
              <objList:rest rdf:resource="&objList;#nil"/>
            </process:ControlConstructList>
          </objList:rest>
        </process:ControlConstructList>
      </process:components>
    </process:Sequence>
  </process:composedOf>

</process:CompositeProcess>


<!--###################################################
    CreateAcctSequence
    ###################################################-->

<process:CompositeProcess rdf:ID="CreateAcctSequence">
  <rdfs:comment>
    CreateAcctSequence performs atomic process
    CreateAcct followed by atomic process LoadUserProfile.
  </rdfs:comment>

  <process:hasInput>
    <process:Input rdf:ID="CreateAcctSequenceCreateAcctInfo">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#AcctInfo</process:parameterType>
    </process:Input>
  </process:hasInput>
  <process:hasOutput>
    <process:Output rdf:ID="CreateAcctSequenceCreateAcctOutput">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#AcctID</process:parameterType>
    </process:Output>
  </process:hasOutput>

  <process:composedOf>
    <process:Sequence>
      <process:components>
        <process:ControlConstructList>
          <objList:first>
            <process:Perform rdf:ID="CreateAcctPerform">
              <process:process rdf:resource="#CreateAcct"/>
              <process:hasDataFrom>
                <process:InputBinding>
                  <process:toParam rdf:resource="#CreateAcctInfo"/>
                  <process:valueSource>
                    <process:ValueOf>
                      <process:theVar rdf:resource="#CreateAcctSequenceCreateAcctInfo"/>
                      <process:fromProcess rdf:resource="&process;#TheParentPerform"/>
                    </process:ValueOf>
                  </process:valueSource>
                </process:InputBinding>
              </process:hasDataFrom>
            </process:Perform>
          </objList:first>
          <objList:rest>
            <process:ControlConstructList>
              <objList:first>
                <process:Perform rdf:ID="LoadUserProfilePerform1">
                  <process:process rdf:resource="#LoadUserProfile"/>
                </process:Perform>
              </objList:first>
              <objList:rest rdf:resource="&objList;#nil"/>
            </process:ControlConstructList>
          </objList:rest>
        </process:ControlConstructList>
      </process:components>
    </process:Sequence>
  </process:composedOf>

  <process:hasResult>
    <process:Result>
      <process:inCondition rdf:resource="&expr;#AlwaysTrue"/>
      <process:withOutput>
        <process:OutputBinding>
          <process:toParam rdf:resource="#CreateAcctSequenceCreateAcctOutput"/>
          <process:valueSource>
            <process:ValueOf>
              <process:theVar rdf:resource="#CreateAcctOutput"/>
              <process:fromProcess rdf:resource="#CreateAcctPerform"/>
            </process:ValueOf>
          </process:valueSource>
        </process:OutputBinding>
      </process:withOutput>
    </process:Result>
  </process:hasResult>
</process:CompositeProcess>


<!--###################################################
    ###################################################
    THE ATOMIC PROCESSES (used by FullCongoBuy)

    The following processes are the Web-accessible programs that Congo
    Inc. is making available at its web site.  They form the building
    blocks for the composite service FullCongoBuy.

    ###################################################
    ###################################################-->


<!-- LocateBook -->

<process:AtomicProcess rdf:ID="LocateBook">
  <rdfs:comment>
    If the book described by "bookName" is in Congo's catalogue, then the
    output of LocateBook is the description of the book and the prices.
    If the book is not in Congo's catalogues, then the output is a message
    to this effect.  
  </rdfs:comment>

  <process:hasInput>
    <process:Input rdf:ID="LocateBookBookName">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&xsd;#string</process:parameterType>
    </process:Input>
  </process:hasInput>

  <process:hasOutput>
    <process:Output rdf:ID="LocateBookOutput">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#LocateBookOutputType</process:parameterType>
    </process:Output>
  </process:hasOutput>

  <process:hasResult> 
    <process:Result>
      <rdfs:comment>
         If the book is in stock, then the result is that
         that the book's ISBN is output.
      </rdfs:comment>
      <process:hasResultVar>
         <process:ResultVar rdf:ID="LocatedBook">
            <rdfs:comment>Thee book identified by the given name</rdfs:comment>
            <process:parameterType rdf:datatype="&xsd;#anyURI">&profileHierarchy;#Book</process:parameterType>
         </process:ResultVar>
      </process:hasResultVar>
      <process:inCondition>
        <expr:SWRL-Condition rdf:ID="BookInStock">
          <expr:expressionObject>
            <swrl:AtomList>
              <rdf:first>
                <swrl:DatavaluedPropertyAtom>
                  <swrl:propertyPredicate rdf:resource="&profileHierarchy;#title"/>
                  <swrl:argument1 rdf:resource="#LocatedBook"/>
                  <swrl:argument2 rdf:resource="#LocateBookBookName"/>
                </swrl:DatavaluedPropertyAtom>
              </rdf:first>
              <rdf:rest>
                <swrl:AtomList>
                  <rdf:first>
                    <swrl:ClassAtom>
                      <swrl:classPredicate rdf:resource="#InStockBook"/>
                      <swrl:argument1 rdf:resource="#LocatedBook"/>
                    </swrl:ClassAtom>
                  </rdf:first>
                  <rdf:rest rdf:resource="&rdf;#nil"/>
                </swrl:AtomList>
              </rdf:rest>
            </swrl:AtomList>
          </expr:expressionObject>
        </expr:SWRL-Condition>
      </process:inCondition>
      <process:hasEffect>
        <expr:SWRL-Expression>
          <expr:expressionObject>
            <swrl:AtomList>
              <rdf:first>
                <swrl:ClassAtom>
                  <swrl:argument1 rdf:resource="#LocateBookOutput"/>
                  <swrl:classPredicate rdf:resource="&profileHierarchy;#ISBN"/>
                </swrl:ClassAtom> 
              </rdf:first>
              <rdf:rest rdf:resource="&rdf;#nil"/>
            </swrl:AtomList>
          </expr:expressionObject>
        </expr:SWRL-Expression>
      </process:hasEffect>
    </process:Result>
  </process:hasResult>

  <process:hasResult> 
    <process:Result>
      <rdfs:comment>
         If the book is out of stock, then an appropriate notification is returned.
      </rdfs:comment>
      <process:inCondition>
        <expr:SWRL-Condition rdf:ID="BookOutOfStock">
          <expr:expressionObject>
            <swrl:AtomList>
              <rdf:first>
                <swrl:DatavaluedPropertyAtom>
                  <swrl:propertyPredicate rdf:resource="&profileHierarchy;#title"/>
                  <swrl:argument1>
                     <swrl:Variable rdf:ID="LocateBook_aBook"/>
                  </swrl:argument1>
                  <swrl:argument2 rdf:resource="#LocateBookBookName"/>
                </swrl:DatavaluedPropertyAtom>
              </rdf:first>
              <rdf:rest>
                <swrl:AtomList>
                  <rdf:first>
                    <swrl:ClassAtom>
                      <swrl:classPredicate rdf:resource="#OutOfStockBook"/>
                      <swrl:argument1 rdf:resource="#LocateBook_aBook"/>
                    </swrl:ClassAtom>
                  </rdf:first>
                  <rdf:rest rdf:resource="&rdf;#nil"/>
                </swrl:AtomList>
              </rdf:rest>
            </swrl:AtomList>
          </expr:expressionObject>
        </expr:SWRL-Condition>
      </process:inCondition>
      <process:hasEffect>
        <expr:SWRL-Expression>
          <expr:expressionObject>
            <swrl:AtomList>
              <rdf:first>
                <swrl:SameIndividualAtom>
                  <swrl:argument1 rdf:resource="#LocateBookOutput"/>
                  <swrl:argument2 rdf:resource="#NotifyBookOutOfStock"/>
                </swrl:SameIndividualAtom> 
              </rdf:first>
              <rdf:rest rdf:resource="&rdf;#nil"/>
            </swrl:AtomList>
          </expr:expressionObject>
        </expr:SWRL-Expression>
      </process:hasEffect>
    </process:Result>
  </process:hasResult>

</process:AtomicProcess>


<!-- PutInCart -->

<process:AtomicProcess rdf:ID="PutInCart">
  <rdfs:comment>
    A very simple version of the put-in-cart process, in which the
    cart is a list of books (each item being a book). 
  </rdfs:comment>

  <process:hasInput>
    <process:Input rdf:ID="PutInCartBookISBN">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&profileHierarchy;#ISBN</process:parameterType>
    </process:Input>
  </process:hasInput>
</process:AtomicProcess>


<!-- Signin -->

<process:AtomicProcess rdf:ID="SignIn">
  <rdfs:comment>
    Sign in is a process that requires input of signin info.
  </rdfs:comment>

  <process:hasInput>
    <process:Input rdf:ID="SignInInfo">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#SignInData</process:parameterType>
    </process:Input>
  </process:hasInput>
</process:AtomicProcess>


<!-- CreateAcct -->

<process:AtomicProcess rdf:ID="CreateAcct">
  <process:hasInput>
    <process:Input rdf:ID="CreateAcctInfo">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#AcctInfo</process:parameterType>
    </process:Input>
  </process:hasInput>
  
  <process:hasOutput>
    <process:Output rdf:ID="CreateAcctOutput">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#AcctID</process:parameterType>
    </process:Output>
  </process:hasOutput>
  
</process:AtomicProcess>


<!-- LoadUserProfile -->

<process:AtomicProcess rdf:ID="LoadUserProfile">
  <rdfs:comment>
    LoadUserProfile can only be invoked if a user profile already exists.
  </rdfs:comment>
</process:AtomicProcess>


<!-- SpecifyPaymentMethod -->

<process:AtomicProcess rdf:ID="SpecifyPaymentMethod">
  <process:hasInput>
    <process:Input rdf:ID="SpecifyPaymentMethodCreditCardNumber">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&xsd;#decimal</process:parameterType>
    </process:Input>
  </process:hasInput>
  <process:hasInput>
    <process:Input rdf:ID="SpecifyPaymentMethodCreditCardType">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#CreditCardType</process:parameterType>  
    </process:Input>
  </process:hasInput>
  <process:hasInput>
    <process:Input rdf:ID="SpecifyPaymentMethodCreditCardExpirationDate">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&time;#Instant</process:parameterType>
    </process:Input>
  </process:hasInput>
</process:AtomicProcess>


<!-- SpecifyDeliveryDetails -->

<process:AtomicProcess rdf:ID="SpecifyDeliveryDetails">
  <process:hasInput>
    <process:Input rdf:ID="DeliveryAddress">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&xsd;#string</process:parameterType>
    </process:Input>
  </process:hasInput>
  <process:hasInput>
    <process:Input rdf:ID="PackagingSelection">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#PackagingType</process:parameterType>
    </process:Input>
  </process:hasInput>
  <process:hasInput>
    <process:Input rdf:ID="DeliveryTypeSelection">
      <process:parameterType rdf:datatype="&xsd;#anyURI">&THIS;#DeliveryType</process:parameterType>
    </process:Input>
  </process:hasInput>
</process:AtomicProcess>


<!-- FinalizeBuy -->

<process:AtomicProcess rdf:ID="FinalizeBuy"/>


<!--###################################################
    ###################################################
    SIMPLE PROCESS AbstractCongoBuy 
    ###################################################
    ###################################################-->

<!-- For some applications it is useful to have an abstract
     version of a composite process that is not executable.  
     Such a process, known as a simple process, expands to
     either a CompositeProcess or an AtomicProcess.  Such
     an abstraction may be useful for hiding certain details
     of a process model that may be either irrelevant for
     certain purposes, or confidential.  

     Below, we provide a rudimentary example of a simple 
     process AbstractCongoBuy
-->

<!-- AbstractCongoBuy expands to FullCongoBuy -->
     
<process:SimpleProcess rdf:ID="AbstractCongoBuy">
  <process:expandsTo rdf:resource="#FullCongoBuy"/>
</process:SimpleProcess>
 
<!-- Likewise, FullCongoBuy collapsesTo AbstractCongoBuy -->

<process:CompositeProcess rdf:about="#FullCongoBuy">
  <process:collapsesTo rdf:resource="#AbstractCongoBuy"/>
</process:CompositeProcess>

<!-- The inputs, outputs, preconditions and results
     of an abstract process are defined by the user to suit
     the specific representational needs of a situation.  We
     leave them out in this example.
--> 

</rdf:RDF>

